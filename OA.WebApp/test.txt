2018-05-09 19:12:02,848
 [9] ERROR errorMsg - System.InvalidOperationException: 尝试创建“OA.WebApp.Controllers.UserController”类型的控制器时出错。请确保控制器具有无参数公共构造函数。 ---> Spring.Objects.Factory.ObjectCreationException: Error thrown by a dependency of object 'OA.WebApp.Controllers.UserController#0' defined in 'file [D:\Demo\OA\OA.WebApp\configs\UserController.xml] line 3' : Initialization of object failed : Cannot instantiate Type [OA.BLL.UserService] using ctor [Void .ctor()] : '程序集“OA.DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”中的类型“OA.DAL.UserInfoDal”的方法“LoadEntities”没有实现。'
 while resolving 'UserService' to 'UserService' defined in 'file [D:\Demo\OA\OA.WebApp\configs\BLL.xml] line 3' ---> Spring.Util.FatalReflectionException: Cannot instantiate Type [OA.BLL.UserService] using ctor [Void .ctor()] : '程序集“OA.DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”中的类型“OA.DAL.UserInfoDal”的方法“LoadEntities”没有实现。' ---> System.TypeLoadException: 程序集“OA.DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”中的类型“OA.DAL.UserInfoDal”的方法“LoadEntities”没有实现。
   在 System.Reflection.RuntimeAssembly.GetType(RuntimeAssembly assembly, String name, Boolean throwOnError, Boolean ignoreCase, ObjectHandleOnStack type)
   在 System.Reflection.RuntimeAssembly.GetType(String name, Boolean throwOnError, Boolean ignoreCase)
   在 System.Reflection.Assembly.CreateInstance(String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)
   在 System.Reflection.Assembly.CreateInstance(String typeName)
   在 OA.DALFactory.AbstractFactory.CreateInstance(String fullClassName) 位置 d:\Demo\OA\OA.DALFactory\AbstractFactory.cs:行号 30
   在 OA.DALFactory.AbstractFactory.CreateUserInfoDal() 位置 d:\Demo\OA\OA.DALFactory\AbstractFactory.cs:行号 24
   在 OA.DALFactory.DBSession.get_UserInfoDal() 位置 d:\Demo\OA\OA.DALFactory\DBSession.cs:行号 42
   在 OA.BLL.UserService.SetCurrentDal() 位置 d:\Demo\OA\OA.BLL\UserService.cs:行号 16
   在 OA.BLL.BaseService`1..ctor() 位置 d:\Demo\OA\OA.BLL\BaseService.cs:行号 15
   在 OA.BLL.UserService..ctor()
   在 _dynamic_OA.BLL.UserService..ctor(Object[] )
   在 Spring.Reflection.Dynamic.SafeConstructor.Invoke(Object[] arguments)
   在 Spring.Util.ObjectUtils.InstantiateType(ConstructorInfo constructor, Object[] arguments)
   --- 内部异常堆栈跟踪的结尾 ---
   在 Spring.Util.ObjectUtils.InstantiateType(ConstructorInfo constructor, Object[] arguments)
   在 Spring.Objects.Factory.Support.SimpleInstantiationStrategy.Instantiate(RootObjectDefinition definition, String name, IObjectFactory factory)
   在 Spring.Objects.Factory.Support.WebInstantiationStrategy.Instantiate(RootObjectDefinition definition, String name, IObjectFactory factory)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String objectName, RootObjectDefinition definition)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateObjectInstance(String objectName, RootObjectDefinition objectDefinition, Object[] arguments)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String name, RootObjectDefinition definition, Object[] arguments, Boolean allowEagerCaching, Boolean suppressConfigure)
   --- 内部异常堆栈跟踪的结尾 ---
   在 Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveReference(IObjectDefinition definition, String name, String argumentName, RuntimeObjectReference reference)
   在 Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolvePropertyValue(String name, IObjectDefinition definition, String argumentName, Object argumentValue)
   在 Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveValueIfNecessary(String name, IObjectDefinition definition, String argumentName, Object argumentValue)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyPropertyValues(String name, RootObjectDefinition definition, IObjectWrapper wrapper, IPropertyValues properties)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.PopulateObject(String name, RootObjectDefinition definition, IObjectWrapper wrapper)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ConfigureObject(String name, RootObjectDefinition definition, IObjectWrapper wrapper)
   在 Spring.Objects.Factory.Support.WebObjectFactory.ConfigureObject(String name, RootObjectDefinition definition, IObjectWrapper wrapper)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String name, RootObjectDefinition definition, Object[] arguments, Boolean allowEagerCaching, Boolean suppressConfigure)
   在 Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectInternal(String name, Type requiredType, Object[] arguments, Boolean suppressConfigure)
   在 Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(String name)
   在 Spring.Objects.Factory.Support.DefaultListableObjectFactory.DoGetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects, IDictionary resultCollector)
   在 Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects)
   在 Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects)
   在 Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type)
   在 Spring.Web.Mvc.SpringMvcDependencyResolver.GetService(Type serviceType)
   在 System.Web.Mvc.DefaultControllerFactory.DefaultControllerActivator.Create(RequestContext requestContext, Type controllerType)
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Web.Mvc.DefaultControllerFactory.DefaultControllerActivator.Create(RequestContext requestContext, Type controllerType)
   在 System.Web.Mvc.DefaultControllerFactory.GetControllerInstance(RequestContext requestContext, Type controllerType)
   在 System.Web.Mvc.DefaultControllerFactory.CreateController(RequestContext requestContext, String controllerName)
   在 System.Web.Mvc.MvcHandler.ProcessRequestInit(HttpContextBase httpContext, IController& controller, IControllerFactory& factory)
   在 System.Web.Mvc.MvcHandler.BeginProcessRequest(HttpContextBase httpContext, AsyncCallback callback, Object state)
   在 System.Web.Mvc.MvcHandler.BeginProcessRequest(HttpContext httpContext, AsyncCallback callback, Object state)
   在 System.Web.Mvc.MvcHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext context, AsyncCallback cb, Object extraData)
   在 System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()
   在 System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)
2018-05-09 19:14:35,958
 [9] ERROR errorMsg - System.InvalidOperationException: 尝试创建“OA.WebApp.Controllers.UserController”类型的控制器时出错。请确保控制器具有无参数公共构造函数。 ---> Spring.Objects.Factory.ObjectCreationException: Error thrown by a dependency of object 'OA.WebApp.Controllers.UserController#0' defined in 'file [D:\Demo\OA\OA.WebApp\configs\UserController.xml] line 3' : Initialization of object failed : Cannot instantiate Type [OA.BLL.UserService] using ctor [Void .ctor()] : '程序集“OA.DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”中的类型“OA.DAL.UserInfoDal”的方法“LoadEntities”没有实现。'
 while resolving 'UserService' to 'UserService' defined in 'file [D:\Demo\OA\OA.WebApp\configs\BLL.xml] line 3' ---> Spring.Util.FatalReflectionException: Cannot instantiate Type [OA.BLL.UserService] using ctor [Void .ctor()] : '程序集“OA.DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”中的类型“OA.DAL.UserInfoDal”的方法“LoadEntities”没有实现。' ---> System.TypeLoadException: 程序集“OA.DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”中的类型“OA.DAL.UserInfoDal”的方法“LoadEntities”没有实现。
   在 System.Reflection.RuntimeAssembly.GetType(RuntimeAssembly assembly, String name, Boolean throwOnError, Boolean ignoreCase, ObjectHandleOnStack type)
   在 System.Reflection.RuntimeAssembly.GetType(String name, Boolean throwOnError, Boolean ignoreCase)
   在 System.Reflection.Assembly.CreateInstance(String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)
   在 System.Reflection.Assembly.CreateInstance(String typeName)
   在 OA.DALFactory.AbstractFactory.CreateInstance(String fullClassName) 位置 d:\Demo\OA\OA.DALFactory\AbstractFactory.cs:行号 30
   在 OA.DALFactory.AbstractFactory.CreateUserInfoDal() 位置 d:\Demo\OA\OA.DALFactory\AbstractFactory.cs:行号 24
   在 OA.DALFactory.DBSession.get_UserInfoDal() 位置 d:\Demo\OA\OA.DALFactory\DBSession.cs:行号 42
   在 OA.BLL.UserService.SetCurrentDal() 位置 d:\Demo\OA\OA.BLL\UserService.cs:行号 16
   在 OA.BLL.BaseService`1..ctor() 位置 d:\Demo\OA\OA.BLL\BaseService.cs:行号 15
   在 OA.BLL.UserService..ctor()
   在 _dynamic_OA.BLL.UserService..ctor(Object[] )
   在 Spring.Reflection.Dynamic.SafeConstructor.Invoke(Object[] arguments)
   在 Spring.Util.ObjectUtils.InstantiateType(ConstructorInfo constructor, Object[] arguments)
   --- 内部异常堆栈跟踪的结尾 ---
   在 Spring.Util.ObjectUtils.InstantiateType(ConstructorInfo constructor, Object[] arguments)
   在 Spring.Objects.Factory.Support.SimpleInstantiationStrategy.Instantiate(RootObjectDefinition definition, String name, IObjectFactory factory)
   在 Spring.Objects.Factory.Support.WebInstantiationStrategy.Instantiate(RootObjectDefinition definition, String name, IObjectFactory factory)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String objectName, RootObjectDefinition definition)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateObjectInstance(String objectName, RootObjectDefinition objectDefinition, Object[] arguments)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String name, RootObjectDefinition definition, Object[] arguments, Boolean allowEagerCaching, Boolean suppressConfigure)
   --- 内部异常堆栈跟踪的结尾 ---
   在 Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveReference(IObjectDefinition definition, String name, String argumentName, RuntimeObjectReference reference)
   在 Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolvePropertyValue(String name, IObjectDefinition definition, String argumentName, Object argumentValue)
   在 Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveValueIfNecessary(String name, IObjectDefinition definition, String argumentName, Object argumentValue)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyPropertyValues(String name, RootObjectDefinition definition, IObjectWrapper wrapper, IPropertyValues properties)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.PopulateObject(String name, RootObjectDefinition definition, IObjectWrapper wrapper)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ConfigureObject(String name, RootObjectDefinition definition, IObjectWrapper wrapper)
   在 Spring.Objects.Factory.Support.WebObjectFactory.ConfigureObject(String name, RootObjectDefinition definition, IObjectWrapper wrapper)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String name, RootObjectDefinition definition, Object[] arguments, Boolean allowEagerCaching, Boolean suppressConfigure)
   在 Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectInternal(String name, Type requiredType, Object[] arguments, Boolean suppressConfigure)
   在 Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(String name)
   在 Spring.Objects.Factory.Support.DefaultListableObjectFactory.DoGetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects, IDictionary resultCollector)
   在 Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects)
   在 Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects)
   在 Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type)
   在 Spring.Web.Mvc.SpringMvcDependencyResolver.GetService(Type serviceType)
   在 System.Web.Mvc.DefaultControllerFactory.DefaultControllerActivator.Create(RequestContext requestContext, Type controllerType)
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Web.Mvc.DefaultControllerFactory.DefaultControllerActivator.Create(RequestContext requestContext, Type controllerType)
   在 System.Web.Mvc.DefaultControllerFactory.GetControllerInstance(RequestContext requestContext, Type controllerType)
   在 System.Web.Mvc.DefaultControllerFactory.CreateController(RequestContext requestContext, String controllerName)
   在 System.Web.Mvc.MvcHandler.ProcessRequestInit(HttpContextBase httpContext, IController& controller, IControllerFactory& factory)
   在 System.Web.Mvc.MvcHandler.BeginProcessRequest(HttpContextBase httpContext, AsyncCallback callback, Object state)
   在 System.Web.Mvc.MvcHandler.BeginProcessRequest(HttpContext httpContext, AsyncCallback callback, Object state)
   在 System.Web.Mvc.MvcHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext context, AsyncCallback cb, Object extraData)
   在 System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()
   在 System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)
2018-05-09 19:15:03,945
 [9] ERROR errorMsg - System.InvalidOperationException: 尝试创建“OA.WebApp.Controllers.UserController”类型的控制器时出错。请确保控制器具有无参数公共构造函数。 ---> Spring.Objects.Factory.ObjectCreationException: Error thrown by a dependency of object 'OA.WebApp.Controllers.UserController#0' defined in 'file [D:\Demo\OA\OA.WebApp\configs\UserController.xml] line 3' : Initialization of object failed : Cannot instantiate Type [OA.BLL.UserService] using ctor [Void .ctor()] : '程序集“OA.DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”中的类型“OA.DAL.UserInfoDal”的方法“LoadEntities”没有实现。'
 while resolving 'UserService' to 'UserService' defined in 'file [D:\Demo\OA\OA.WebApp\configs\BLL.xml] line 3' ---> Spring.Util.FatalReflectionException: Cannot instantiate Type [OA.BLL.UserService] using ctor [Void .ctor()] : '程序集“OA.DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”中的类型“OA.DAL.UserInfoDal”的方法“LoadEntities”没有实现。' ---> System.TypeLoadException: 程序集“OA.DAL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”中的类型“OA.DAL.UserInfoDal”的方法“LoadEntities”没有实现。
   在 System.Reflection.RuntimeAssembly.GetType(RuntimeAssembly assembly, String name, Boolean throwOnError, Boolean ignoreCase, ObjectHandleOnStack type)
   在 System.Reflection.RuntimeAssembly.GetType(String name, Boolean throwOnError, Boolean ignoreCase)
   在 System.Reflection.Assembly.CreateInstance(String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)
   在 System.Reflection.Assembly.CreateInstance(String typeName)
   在 OA.DALFactory.AbstractFactory.CreateInstance(String fullClassName) 位置 d:\Demo\OA\OA.DALFactory\AbstractFactory.cs:行号 30
   在 OA.DALFactory.AbstractFactory.CreateUserInfoDal() 位置 d:\Demo\OA\OA.DALFactory\AbstractFactory.cs:行号 24
   在 OA.DALFactory.DBSession.get_UserInfoDal() 位置 d:\Demo\OA\OA.DALFactory\DBSession.cs:行号 42
   在 OA.BLL.UserService.SetCurrentDal() 位置 d:\Demo\OA\OA.BLL\UserService.cs:行号 16
   在 OA.BLL.BaseService`1..ctor() 位置 d:\Demo\OA\OA.BLL\BaseService.cs:行号 15
   在 OA.BLL.UserService..ctor()
   在 _dynamic_OA.BLL.UserService..ctor(Object[] )
   在 Spring.Reflection.Dynamic.SafeConstructor.Invoke(Object[] arguments)
   在 Spring.Util.ObjectUtils.InstantiateType(ConstructorInfo constructor, Object[] arguments)
   --- 内部异常堆栈跟踪的结尾 ---
   在 Spring.Util.ObjectUtils.InstantiateType(ConstructorInfo constructor, Object[] arguments)
   在 Spring.Objects.Factory.Support.SimpleInstantiationStrategy.Instantiate(RootObjectDefinition definition, String name, IObjectFactory factory)
   在 Spring.Objects.Factory.Support.WebInstantiationStrategy.Instantiate(RootObjectDefinition definition, String name, IObjectFactory factory)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String objectName, RootObjectDefinition definition)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateObjectInstance(String objectName, RootObjectDefinition objectDefinition, Object[] arguments)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String name, RootObjectDefinition definition, Object[] arguments, Boolean allowEagerCaching, Boolean suppressConfigure)
   --- 内部异常堆栈跟踪的结尾 ---
   在 Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveReference(IObjectDefinition definition, String name, String argumentName, RuntimeObjectReference reference)
   在 Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolvePropertyValue(String name, IObjectDefinition definition, String argumentName, Object argumentValue)
   在 Spring.Objects.Factory.Support.ObjectDefinitionValueResolver.ResolveValueIfNecessary(String name, IObjectDefinition definition, String argumentName, Object argumentValue)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyPropertyValues(String name, RootObjectDefinition definition, IObjectWrapper wrapper, IPropertyValues properties)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.PopulateObject(String name, RootObjectDefinition definition, IObjectWrapper wrapper)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ConfigureObject(String name, RootObjectDefinition definition, IObjectWrapper wrapper)
   在 Spring.Objects.Factory.Support.WebObjectFactory.ConfigureObject(String name, RootObjectDefinition definition, IObjectWrapper wrapper)
   在 Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String name, RootObjectDefinition definition, Object[] arguments, Boolean allowEagerCaching, Boolean suppressConfigure)
   在 Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectInternal(String name, Type requiredType, Object[] arguments, Boolean suppressConfigure)
   在 Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(String name)
   在 Spring.Objects.Factory.Support.DefaultListableObjectFactory.DoGetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects, IDictionary resultCollector)
   在 Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects)
   在 Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects)
   在 Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type)
   在 Spring.Web.Mvc.SpringMvcDependencyResolver.GetService(Type serviceType)
   在 System.Web.Mvc.DefaultControllerFactory.DefaultControllerActivator.Create(RequestContext requestContext, Type controllerType)
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Web.Mvc.DefaultControllerFactory.DefaultControllerActivator.Create(RequestContext requestContext, Type controllerType)
   在 System.Web.Mvc.DefaultControllerFactory.GetControllerInstance(RequestContext requestContext, Type controllerType)
   在 System.Web.Mvc.DefaultControllerFactory.CreateController(RequestContext requestContext, String controllerName)
   在 System.Web.Mvc.MvcHandler.ProcessRequestInit(HttpContextBase httpContext, IController& controller, IControllerFactory& factory)
   在 System.Web.Mvc.MvcHandler.BeginProcessRequest(HttpContextBase httpContext, AsyncCallback callback, Object state)
   在 System.Web.Mvc.MvcHandler.BeginProcessRequest(HttpContext httpContext, AsyncCallback callback, Object state)
   在 System.Web.Mvc.MvcHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext context, AsyncCallback cb, Object extraData)
   在 System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()
   在 System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)
2018-05-28 20:36:55,084
 [9] ERROR errorMsg - System.Configuration.ConfigurationErrorsException: Error creating context 'spring.root': 未能找到文件“D:\Demo\OA\OA.WebApp\configs\UserController.xml”。 ---> Spring.Objects.Factory.ObjectDefinitionStoreException: IOException parsing XML document from file [D:\Demo\OA\OA.WebApp\configs\UserController.xml] ---> System.IO.FileNotFoundException: 未能找到文件“D:\Demo\OA\OA.WebApp\configs\UserController.xml”。
   在 System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)
   在 System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
   在 System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)
   在 Spring.Core.IO.FileSystemResource.get_InputStream()
   在 Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.LoadObjectDefinitions(IResource resource)
   --- 内部异常堆栈跟踪的结尾 ---
   在 Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.LoadObjectDefinitions(IResource resource)
   在 Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.LoadObjectDefinitions(String location)
   在 Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.LoadObjectDefinitions(String[] locations)
   在 Spring.Context.Support.AbstractXmlApplicationContext.LoadObjectDefinitions(XmlObjectDefinitionReader objectDefinitionReader)
   在 Spring.Context.Support.AbstractXmlApplicationContext.LoadObjectDefinitions(DefaultListableObjectFactory objectFactory)
   在 Spring.Context.Support.AbstractXmlApplicationContext.RefreshObjectFactory()
   在 Spring.Context.Support.AbstractApplicationContext.Refresh()
   在 Spring.Context.Support.WebApplicationContext..ctor(WebApplicationContextArgs args)
   在 Spring.Context.Support.WebApplicationContext..ctor(String name, Boolean caseSensitive, String[] configurationLocations)
   在 _dynamic_Spring.Context.Support.WebApplicationContext..ctor(Object[] )
   在 Spring.Reflection.Dynamic.SafeConstructor.Invoke(Object[] arguments)
   在 Spring.Context.Support.ContextHandler.RootContextInstantiator.InvokeContextConstructor(ConstructorInfo ctor)
   在 Spring.Context.Support.ContextHandler.ContextInstantiator.InstantiateContext()
   在 Spring.Context.Support.ContextHandler.InstantiateContext(IApplicationContext parentContext, Object configContext, String contextName, Type contextType, Boolean caseSensitive, IList`1 resources)
   在 Spring.Context.Support.WebContextHandler.InstantiateContext(IApplicationContext parent, Object configContext, String contextName, Type contextType, Boolean caseSensitive, IList`1 resources)
   在 Spring.Context.Support.ContextHandler.Create(Object parent, Object configContext, XmlNode section)
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Configuration.BaseConfigurationRecord.EvaluateOne(String[] keys, SectionInput input, Boolean isTrusted, FactoryRecord factoryRecord, SectionRecord sectionRecord, Object parentResult)
   在 System.Configuration.BaseConfigurationRecord.Evaluate(FactoryRecord factoryRecord, SectionRecord sectionRecord, Object parentResult, Boolean getLkg, Boolean getRuntimeObject, Object& result, Object& resultRuntimeObject)
   在 System.Configuration.BaseConfigurationRecord.GetSectionRecursive(String configKey, Boolean getLkg, Boolean checkPermission, Boolean getRuntimeObject, Boolean requestIsHere, Object& result, Object& resultRuntimeObject)
   在 System.Configuration.BaseConfigurationRecord.GetSection(String configKey)
   在 System.Web.HttpContext.GetSection(String sectionName)
   在 System.Web.Configuration.HttpConfigurationSystem.GetSection(String sectionName)
   在 System.Web.Configuration.HttpConfigurationSystem.System.Configuration.Internal.IInternalConfigSystem.GetSection(String configKey)
   在 System.Configuration.ConfigurationManager.GetSection(String sectionName)
   在 Spring.Util.ConfigurationUtils.GetSection(String sectionName)
   在 Spring.Context.Support.ContextRegistry.InitializeContextIfNeeded()
   在 Spring.Context.Support.ContextRegistry.GetContext()
   在 Spring.Web.Mvc.SpringMvcApplication.BuildDependencyResolver()
   在 Spring.Web.Mvc.SpringMvcApplication.Application_BeginRequest(Object sender, EventArgs e)
   在 System.Web.HttpApplication.SyncEventExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()
   在 System.Web.HttpApplication.ExecuteStepImpl(IExecutionStep step)
   在 System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)
2018-05-28 20:44:45,062
 [7] ERROR errorMsg - System.Configuration.ConfigurationErrorsException: Error creating context 'spring.root': 未能找到文件“D:\Demo\OA\OA.WebApp\configs\UserController.xml”。 ---> Spring.Objects.Factory.ObjectDefinitionStoreException: IOException parsing XML document from file [D:\Demo\OA\OA.WebApp\configs\UserController.xml] ---> System.IO.FileNotFoundException: 未能找到文件“D:\Demo\OA\OA.WebApp\configs\UserController.xml”。
   在 System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)
   在 System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
   在 System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)
   在 Spring.Core.IO.FileSystemResource.get_InputStream()
   在 Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.LoadObjectDefinitions(IResource resource)
   --- 内部异常堆栈跟踪的结尾 ---
   在 Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.LoadObjectDefinitions(IResource resource)
   在 Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.LoadObjectDefinitions(String location)
   在 Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.LoadObjectDefinitions(String[] locations)
   在 Spring.Context.Support.AbstractXmlApplicationContext.LoadObjectDefinitions(XmlObjectDefinitionReader objectDefinitionReader)
   在 Spring.Context.Support.AbstractXmlApplicationContext.LoadObjectDefinitions(DefaultListableObjectFactory objectFactory)
   在 Spring.Context.Support.AbstractXmlApplicationContext.RefreshObjectFactory()
   在 Spring.Context.Support.AbstractApplicationContext.Refresh()
   在 Spring.Context.Support.WebApplicationContext..ctor(WebApplicationContextArgs args)
   在 Spring.Context.Support.WebApplicationContext..ctor(String name, Boolean caseSensitive, String[] configurationLocations)
   在 _dynamic_Spring.Context.Support.WebApplicationContext..ctor(Object[] )
   在 Spring.Reflection.Dynamic.SafeConstructor.Invoke(Object[] arguments)
   在 Spring.Context.Support.ContextHandler.RootContextInstantiator.InvokeContextConstructor(ConstructorInfo ctor)
   在 Spring.Context.Support.ContextHandler.ContextInstantiator.InstantiateContext()
   在 Spring.Context.Support.ContextHandler.InstantiateContext(IApplicationContext parentContext, Object configContext, String contextName, Type contextType, Boolean caseSensitive, IList`1 resources)
   在 Spring.Context.Support.WebContextHandler.InstantiateContext(IApplicationContext parent, Object configContext, String contextName, Type contextType, Boolean caseSensitive, IList`1 resources)
   在 Spring.Context.Support.ContextHandler.Create(Object parent, Object configContext, XmlNode section)
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Configuration.BaseConfigurationRecord.EvaluateOne(String[] keys, SectionInput input, Boolean isTrusted, FactoryRecord factoryRecord, SectionRecord sectionRecord, Object parentResult)
   在 System.Configuration.BaseConfigurationRecord.Evaluate(FactoryRecord factoryRecord, SectionRecord sectionRecord, Object parentResult, Boolean getLkg, Boolean getRuntimeObject, Object& result, Object& resultRuntimeObject)
   在 System.Configuration.BaseConfigurationRecord.GetSectionRecursive(String configKey, Boolean getLkg, Boolean checkPermission, Boolean getRuntimeObject, Boolean requestIsHere, Object& result, Object& resultRuntimeObject)
   在 System.Configuration.BaseConfigurationRecord.GetSection(String configKey)
   在 System.Web.HttpContext.GetSection(String sectionName)
   在 System.Web.Configuration.HttpConfigurationSystem.GetSection(String sectionName)
   在 System.Web.Configuration.HttpConfigurationSystem.System.Configuration.Internal.IInternalConfigSystem.GetSection(String configKey)
   在 System.Configuration.ConfigurationManager.GetSection(String sectionName)
   在 Spring.Util.ConfigurationUtils.GetSection(String sectionName)
   在 Spring.Context.Support.ContextRegistry.InitializeContextIfNeeded()
   在 Spring.Context.Support.ContextRegistry.GetContext()
   在 Spring.Web.Mvc.SpringMvcApplication.BuildDependencyResolver()
   在 Spring.Web.Mvc.SpringMvcApplication.Application_BeginRequest(Object sender, EventArgs e)
   在 System.Web.HttpApplication.SyncEventExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()
   在 System.Web.HttpApplication.ExecuteStepImpl(IExecutionStep step)
   在 System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)
